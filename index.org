#+TITLE: Functors
#+OPTIONS: toc:0, num:nil, \n:t
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0
#+REVEAL_THEME: moon

* APIs, Interfaces
- Talk about how much of programming is coding to an interface as a lead-in to Functor being a high-level API.

* Iteration

** One of the Most Common Operations

** 
Contrived PHP example 1:
Uppercase an array of strings

#+begin_src php :results output pp :exports both
function uppercaseWords(array $words) {
  $uppercased = [];
  foreach ($words as $word) {
    $uppercased[] = strtoupper($word);
  }
  return $uppercased;
}
$words = ["functional", "programming", "rocks"];
print_r(uppercaseWords($words));
#+end_src
#+RESULTS:
: Array
: (
:     [0] => FUNCTIONAL
:     [1] => PROGRAMMING
:     [2] => ROCKS
: )

** 

Contrived PHP example 2:
Increment an array of ints:

#+begin_src php :results output pp :exports both
function incrementInts(array $ints) {
  $incd = [];
  foreach ($ints as $i) {
    $incd[] = $i + 1;
  }
  return $incd;
}
$ints = [1, 2, 3];
print_r(incrementInts($ints));
#+end_src
#+RESULTS:
: Array
: (
:     [0] => 2
:     [1] => 3
:     [2] => 4
: )

** 
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">

#+begin_src java
List<String> words = Arrays.asList("functional", "programming");
List<String> upperWords = new ArrayList<>();
for (String word : words) {
  upperWords.add(word.toUpperCase());
}
#+end_src

#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">

#+begin_src java
List<Integer> ints = Arrays.asList(1, 2, 3);
List<Integer> newInts = new ArrayList<>();
for (Integer i : ints) {
  newInts.add(i + 1);
}
#+end_src

#+REVEAL_HTML: </div>

* Let's Do Some Mapping!
** No, not that kind of mapping!
(show picture of a map or something equally hilarious)

** Lists
** Trees

* Functor Laws

* Notes
- Sets cannot have Functor instances. Why?
