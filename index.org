#+TITLE: Functors
#+OPTIONS: toc:0, num:nil, \n:t
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.8.0
#+REVEAL_THEME: moon

* APIs, Interfaces, Abstraction
- Talk about how much of programming is coding to an interface as a lead-in to Functor being a high-level API.

* Iteration Over Lists, Arrays, Vectors, etc.

** One of the Most Common Operations in Programming

** 
Contrived PHP example 1:
Uppercase an array of strings

#+begin_src php :results output pp :exports both
function uppercaseWords(array $words) {
  $uppercased = [];
  foreach ($words as $word) {
    $uppercased[] = strtoupper($word);
  }
  return $uppercased;
}
$words = ["functional", "programming", "rocks"];
print_r(uppercaseWords($words));
#+end_src
#+RESULTS:
: Array
: (
:     [0] => FUNCTIONAL
:     [1] => PROGRAMMING
:     [2] => ROCKS
: )

** 
Contrived PHP example 2:
Increment an array of ints:

#+begin_src php :results output pp :exports both
function incrementInts(array $ints) {
  $incd = [];
  foreach ($ints as $i) {
    $incd[] = $i + 1;
  }
  return $incd;
}
$ints = [1, 2, 3];
print_r(incrementInts($ints));
#+end_src
#+RESULTS:
: Array
: (
:     [0] => 2
:     [1] => 3
:     [2] => 4
: )

** 
There's a lot in common in these examples.
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">

#+begin_src php
function uppercaseWords(array $words) {
  $uppercased = [];
  foreach ($words as $word) {
    $uppercased[] = strtoupper($word);
  }
  return $uppercased;
}
#+end_src

#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">

#+begin_src php
function incrementInts(array $ints) {
  $incd = [];
  foreach ($ints as $i) {
    $incd[] = $i + 1;
  }
  return $incd;
}
#+end_src

#+REVEAL_HTML: </div>

** 
Let's factor out what's common;
parameterize what's different
#+begin_src php :results output pp :exports both :session applyfunction
function applyFunctionForEach(array $arr, callable $f) {
  $res = [];
  foreach ($arr as $i) {
    $res[] = $f($i);
  }
  return $res;
}
#+end_src

** 
Then ~uppercaseWords~ becomes:
#+begin_src php :results output pp :exports both :session applyfunction
function upperCase($s) { return strtoupper($s); }
function uppercaseWords($words) {
  return applyFunctionForEach($words, 'upperCase');
}
$words = ["functional", "programming", "rocks"];
print_r(uppercaseWords($words));
#+end_src
#+RESULTS:

** 
and ~incrementInts~ becomes:
#+begin_src php :results output pp :exports both :session applyfunction
function inc($i) { return $i + 1; }
function incrementInts($ints) {
  return applyFunctionForEach($ints, 'inc');
}
$ints = [1, 2, 3];
print_r(incrementInts($ints));
#+end_src
#+RESULTS:

* Iteration Over Trees

** A Binary Tree
#+begin_src php :results output pp :exports both :session btree
interface BinaryTree {}
class Node implements BinaryTree {
  private $left;
  private $right;
  private $val;
  public function __construct($left, $right, $val) {
    $this->left = $left;
    $this->right = $right;
    $this->val = $val;
  }
  // getters elided
}
class Leaf implements BinaryTree {}
#+end_src
#+RESULTS:

** An Instance of a Binary Tree

#+begin_src php :results output pp :exports both :session btree
$leaf = new Leaf();
$tree = new Node(
  new Node($leaf, $leaf, "functional"),
  new Node($leaf, $leaf, "rocks"),
  "programming"
);
#+end_src
#+RESULTS:

** 
Let's try to uppercase the strings in a binary tree.
#+begin_src php :results output pp :exports both :session btree
function uppercaseBinaryTree($btree) {
  if ($btree instanceof Node) {
    $newLeft = uppercaseBinaryTree($btree->getLeftNode());
    $newRight = uppercaseBinaryTree($btree->getRightNode());
    $newStr = strtoupper($btree->getVal());
    $newNode = new Node($newLeft, $newRight, $newStr);
  } else {
    $newNode = $btree;
  }
  return $newNode;
}
print_r(uppercaseBinaryTree($tree));
#+end_src
#+RESULTS:

** 
But that's not very OO-ey. Instead let's define it as a method.
#+begin_src php :results output pp :exports both
interface BinaryTree {
  function uppercase();
}
#+end_src

** 
And implement it:
#+begin_src php :results output pp :exports both
class Node implements BinaryTree {
  // boring stuff elided

  public function uppercase() {
    $newLeft = $this->left->uppercase();
    $newRight = $this->right->uppercase();
    $newStr = strtoupper($this->val);
    return new Node($newLeft, $newRight, $newStr);
  }
}
class Leaf implements BinaryTree {
  public function uppercase() {
    return $this;
  }
}
#+end_src

** 
Then uppercasing a binary tree of strings becomes:
#+begin_src php :results output pp :exports both
$tree->uppercase();
#+end_src

** 
But the ~uppercase~ method is very specific.  We'd like to have something that allows us to perform *any* operation on the values inside a binary tree.
Let's do for ~BinaryTree~ what we did for PHP arrays.
#+begin_src php :results output pp :exports both
interface BinaryTree {
  function applyFunctionToEachNodeValue(callable $f);
}
#+end_src

** 
And the implementation:
#+begin_src php :results output pp :exports both
class Node implements BinaryTree {
  // boring stuff elided

  public function applyFunctionToEachNodeValue(callable $f) {
    $newLeft = $this->left->applyFunctionToEachNodeValue($f);
    $newRight = $this->right->applyFunctionToEachNodeValue($f);
    $newStr = $f($this->val);
    return new Node($newLeft, $newRight, $newStr);
  }
}
class Leaf implements BinaryTree {
  public function applyFunctionToEachNodeValue(callable $f) {
    return $this;
  }
}
#+end_src

** 
And now our ~uppercaseBinaryTree~ function can be written as
#+begin_src php :results output pp :exports both
function uppercaseBinaryTree($btree) {
  return $btree->applyFunctionToEachNodeValue('strtoupper');
}
#+end_src

* Digression: The Option/Maybe Type

** Null Is Terrible
- The creator of the null reference (Tony Hoare) called it his "Billion-dollar mistake"
- [[https://blog.overops.com/the-top-10-exceptions-types-in-production-java-applications-based-on-1b-events/][Largest source of exceptions in Java]]
- It adds this extra value to every type but does not honor any of their contracts.
- In C, two null values of any type compare as equal.

** So What's the Alternative?
#+ATTR_REVEAL: :frag (appear)
An Option/Maybe Type!
#+ATTR_REVEAL: :frag (appear)
(Type *constructor*, actually)

** 
In Haskell, defined as
#+begin_src haskell :results output pp :exports both
data Maybe a = Just a
             | Nothing
#+end_src

** Haskell Example 1: Uppercase a String
A variable of type ~Maybe String~:
#+begin_src haskell :session maybe
import Data.Maybe

maybeAString :: Maybe String
maybeAString = Just "Portland FP Meetup"
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+begin_group
And here's a function to uppercase a ~Maybe String~:

#+begin_src haskell :session maybe
uppercaseMaybeString :: Maybe String -> Maybe String
uppercaseMaybeString maybeString = case maybeString of
  Just s -> Just (toUpper s)
  Nothing -> Nothing
#+end_src

#+end_group

#+ATTR_REVEAL: :frag (appear)
#+begin_src haskell :session maybe
uppercaseMaybeString maybeAString
#+end_src

** Haskell Example 2: Increment an Integer
A variable of type ~Maybe Int~:
#+begin_src haskell :session maybe
import Data.Maybe

maybeAString :: Maybe Int
maybeAString = Just 42
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+begin_group
And here's a function to increment the integer in a ~Maybe Int~:

#+begin_src haskell :session maybe
incrementMaybeInt :: Maybe Int -> Maybe Int
incrementMaybeInt maybeInt = case maybeInt of
  Just i -> Just (i + 1)
  Nothing -> Nothing
#+end_src

#+end_group

#+ATTR_REVEAL: :frag (appear)
#+begin_src haskell :session maybe
incrementMaybeInt maybeInt
#+end_src

** That looked familiar . . .  again.
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">

#+begin_src haskell
uppercaseMaybeString :: Maybe String -> Maybe String
uppercaseMaybeString maybeString = case maybeString of
  Just s -> Just (toUpper s)
  Nothing -> Nothing
#+end_src

#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">

#+begin_src haskell
incrementMaybeInt :: Maybe Int -> Maybe Int
incrementMaybeInt maybeInt = case maybeInt of
  Just i -> Just (i + 1)
  Nothing -> Nothing
#+end_src

#+REVEAL_HTML: </div>

** Abstract Out the Common Bits
#+begin_src haskell
applyFunctionToMaybe maybe f = case maybe of
  Just x -> Just (f x)
  Nothing -> Nothing
#+end_src
#+ATTR_REVEAL: :frag (appear)
#+begin_group
What's its type?
#+begin_src haskell
applyFunctionToMaybe :: Maybe a -> (a -> b) -> Maybe b
#+end_src
#+end_group

#+ATTR_REVEAL: :frag (appear)
#+begin_group
And now ~uppercaseMaybeString~ and ~incrementMaybeInt~ can be defined in terms of it.
#+begin_src haskell
uppercaseMaybeString maybe = applyFunctionToMaybe maybe toupper
incrementMaybeInt maybe = applyFunctionToMaybe maybe (+1)
#+end_src
#+end_group

* Bringing It All Together

** Look at the types (In Haskell)
#+begin_src haskell
applyFunctionForEach         :: Array a      -> (a -> b) -> Array b      -- PHP array example
applyFunctionToEachNodeValue :: BinaryTree a -> (a -> b) -> BinaryTree b -- PHP BinaryTree example
applyFunctionToMaybe         :: Maybe a      -> (a -> b) -> Maybe b      -- Haskell Maybe example
#+end_src

#+ATTR_REVEAL: :frag (appear)
In addition to using type variables Haskell allows us to use variable for *type constructors*.
#+ATTR_REVEAL: :frag (appear)
Here we us ~f~ to stand in for the above type constructors.

#+ATTR_REVEAL: :frag (appear)
#+begin_src haskell
applyFunction :: f a -> (a -> b) -> f b
#+end_src

** 
In Haskell this function is called ~fmap~ and is embodied by the ~Functor~ type class.
#+begin_src haskell
class Functor f where
  fmap :: (a -> b) -> f a -> f b
#+end_src

** 
In Haskell data types are said to *have* instances of a given type class.
#+ATTR_REVEAL: :frag (appear)
One can create instances of type classes for any type at any time.
#+ATTR_REVEAL: :frag (appear)
For example, here's the ~Functor~ instance for ~Maybe~:
#+ATTR_REVEAL: :frag (appear)
#+begin_src haskell
instance Functor Maybe where
  fmap f (Just x) = Just (f x)
  fmap _ Nothing = Nothing
#+end_src

* Functor Laws

* Notes
- Sets cannot have Functor instances. Why?
